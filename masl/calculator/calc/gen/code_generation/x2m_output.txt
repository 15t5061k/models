domain,calc,,,,,,,
object,Display,,,,,,,
object,,,,,,,,
object,Memory,,,,,,,
object,,,,,,,,
object,Operation,,,,,,,
object,,,,,,,,
object,Calculator,,,,,,,
object,,,,,,,,
routine,calc,,public,key,,,,
parameter,code,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  if ( 0 <= code and code <= 15 ) then%0A    // Create the calculator instance population on the first call%0A    if ( null = find_one Calculator() ) then%0A      ( create unique Calculator() ).init();%0A    end if;%0A    // generate the key press to the display%0A    generate Display.keypress( code ) to ( find_one Calculator() )->R1.Display;%0A  end if;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,calc,,public,clear,,,,
codeblock,begin%0A  // Create the calculator instance population on the first call%0A  if ( null = find_one Calculator() ) then%0A    ( create unique Calculator() ).init();%0A  end if;%0A  // clear the memory%0A  ( find_one Memory() ).reset();%0A  // set the calculator to no-op%0A  ( find_one Calculator() ).current_op := -1;%0A  // reset the display%0A  generate Display.reset() to find_one Display();%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,disp,,,,,,,
routine,calc,,public,result,,,,
parameter,value,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,calc,,public,error,,,,
parameter,message,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
regularrel,R1,,,,,,,
participation,calc,Calculator,prints_answer_on,unconditionally,one,calc,Display,
participation,calc,Display,displays_values_for,unconditionally,one,calc,Calculator,
participation,,,,,,,,
regularrel,,,,,,,,
regularrel,R2,,,,,,,
participation,calc,Calculator,stores_value_for_calculation_in,unconditionally,one,calc,Memory,
participation,calc,Memory,stores_value_for,unconditionally,one,calc,Calculator,
participation,,,,,,,,
regularrel,,,,,,,,
associative,R3,calc,Operation,,,,,
participation,calc,Memory,combines_with,unconditionally,one,calc,Display,
participation,calc,Display,combines_with,unconditionally,one,calc,Memory,
participation,,,,,,,,
associative,R3,calc,Operation,,,,,
associative,,,,,,,,
object,Display,,,,,,,
attribute,calc_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,displays_values_for,Calculator,calc_id,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,value,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,whole_part,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,fractional_part,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,sign,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,calc,Display,public,clearDisplay,instance,,,
codeblock,begin%0A  this.value := 0;%0A  this.whole_part := 0;%0A  this.fractional_part := 0;%0A  this.sign := 1;%0Aend service;,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Display,displaying_memory_value,,,,,
codeblock,begin%0A  // reset the display%0A  this.clearDisplay();%0A  // display the value in memory%0A  disp~>result( (this->R3.Memory).value );%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Display,toggling_sign,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  // -%0A  if ( 11 = key ) then%0A    // toggle the sign%0A    this.sign := -1;%0A  // .%0A  elsif ( 15 = key ) then%0A    generate Display.point( key ) to this;%0A  // numbers 0-9%0A  elsif ( 0 <= key and key <= 9 ) then%0A    generate Display.digit( key ) to this;%0A  else%0A    generate Display.error( "Invalid key press" ) to this;%0A  end if;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Display,receiving_whole_part,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,mem : instance of Memory;%0Aop : instance of Operation;%0Abegin%0A  // .%0A  if ( 15 = key ) then%0A    generate Display.point( key ) to this;%0A  // numbers 0-9%0A  elsif ( 0 <= key and key <= 9 ) then%0A    // add to the whole part%0A    if ( 0 = this.whole_part ) then%0A      this.whole_part := integer(key);%0A    else%0A      this.whole_part := key + this.whole_part * 10;%0A    end if;%0A    this.value := this.sign * ( real(this.whole_part) + this.fractional_part );%0A    // display the new value%0A    disp~>result( this.value );%0A  // +%2C -%2C *%2C /%2C =%0A  elsif ( 10 <= key and key <= 14) then%0A    generate Display.operator( key ) to this;%0A  else%0A    generate Display.error( "invalid key press" ) to this;%0A  end if;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Display,receiving_fractional_part,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  // .%0A  if ( 15 = key ) then%0A    // ignore%0A  // numbers 0-9%0A  elsif ( 0 <= key and key <= 9 ) then%0A    // add to the fractional part%0A    this.fractional_part := this.fractional_part + ( key / 10.0 );%0A    this.value := this.sign * ( real(this.whole_part) + this.fractional_part );%0A    // display the new value%0A    disp~>result( this.value );%0A  // +%2C -%2C *%2C /%2C =%0A  elsif ( 10 <= key and key <= 14 ) then%0A    generate Display.operator( key ) to this;%0A  else%0A    generate Display.error( "invalid key press" ) to this;%0A  end if;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Display,evaluating,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  // evaluate with the last saved operation%0A  (this->R3.Operation).op := (this->R1.Calculator).current_op;%0A  (this->R3.Operation).evaluate();%0A  // store the operation for the next evaluation%0A  (this->R1.Calculator).current_op := key;%0A  // reset the display%0A  generate Display.reset() to this;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Display,displaying_error,,,,,
parameter,message,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  // send the error to the display%0A  disp~>error( message );%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,keypress,,,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,point,,,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,operator,,,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,digit,,,,,,,
parameter,key,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,error,,,,,,,
parameter,message,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,reset,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,keypress,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,point,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,operator,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,digit,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,error,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,reset,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_memory_value,,,keypress,toggling_sign,,,
transition,,,,,,,,
transition,displaying_memory_value,,,point,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_memory_value,,,operator,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_memory_value,,,digit,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_memory_value,,,error,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_memory_value,,,reset,displaying_memory_value,,,
transition,,,,,,,,
transition,toggling_sign,,,keypress,toggling_sign,,,
transition,,,,,,,,
transition,toggling_sign,,,point,receiving_fractional_part,,,
transition,,,,,,,,
transition,toggling_sign,,,operator,Cannot_Happen,,,
transition,,,,,,,,
transition,toggling_sign,,,digit,receiving_whole_part,,,
transition,,,,,,,,
transition,toggling_sign,,,error,displaying_error,,,
transition,,,,,,,,
transition,toggling_sign,,,reset,displaying_memory_value,,,
transition,,,,,,,,
transition,receiving_whole_part,,,keypress,receiving_whole_part,,,
transition,,,,,,,,
transition,receiving_whole_part,,,point,receiving_fractional_part,,,
transition,,,,,,,,
transition,receiving_whole_part,,,operator,evaluating,,,
transition,,,,,,,,
transition,receiving_whole_part,,,digit,Cannot_Happen,,,
transition,,,,,,,,
transition,receiving_whole_part,,,error,displaying_error,,,
transition,,,,,,,,
transition,receiving_whole_part,,,reset,displaying_memory_value,,,
transition,,,,,,,,
transition,receiving_fractional_part,,,keypress,receiving_fractional_part,,,
transition,,,,,,,,
transition,receiving_fractional_part,,,point,Cannot_Happen,,,
transition,,,,,,,,
transition,receiving_fractional_part,,,operator,evaluating,,,
transition,,,,,,,,
transition,receiving_fractional_part,,,digit,Cannot_Happen,,,
transition,,,,,,,,
transition,receiving_fractional_part,,,error,displaying_error,,,
transition,,,,,,,,
transition,receiving_fractional_part,,,reset,displaying_memory_value,,,
transition,,,,,,,,
transition,evaluating,,,keypress,Cannot_Happen,,,
transition,,,,,,,,
transition,evaluating,,,point,Cannot_Happen,,,
transition,,,,,,,,
transition,evaluating,,,operator,Cannot_Happen,,,
transition,,,,,,,,
transition,evaluating,,,digit,Cannot_Happen,,,
transition,,,,,,,,
transition,evaluating,,,error,displaying_error,,,
transition,,,,,,,,
transition,evaluating,,,reset,displaying_memory_value,,,
transition,,,,,,,,
transition,displaying_error,,,keypress,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_error,,,point,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_error,,,operator,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_error,,,digit,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_error,,,error,Cannot_Happen,,,
transition,,,,,,,,
transition,displaying_error,,,reset,displaying_memory_value,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,key_letter,,,,,,,
pragmaitem,"DISP",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Memory,,,,,,,
attribute,calc_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R2,,stores_value_for,Calculator,calc_id,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,value,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,calc,Memory,public,store,instance,,,
parameter,value,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  // store the new value%0A  this.value := value;%0Aend service;,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,calc,Memory,public,reset,instance,,,
codeblock,begin%0A  // reset the memory to empty%0A  this.value := 0;%0Aend service;,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
pragma,key_letter,,,,,,,
pragmaitem,"MEM",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Operation,,,,,,,
attribute,calc_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R3,,combines_with,Memory,calc_id,,,
referential,,,,,,,,
referential,R3,,combines_with,Display,calc_id,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,op,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,calc,Operation,public,evaluate,instance,,,
codeblock,mem_val : real;%0Adisp_val : real;%0Aresult_val : real;%0Abegin%0A  // get memory value%0A  mem_val := (this->R3.Memory).value;%0A  // get display value%0A  disp_val := (this->R3.Display).value;%0A  // evaluate the expression%0A  // +%0A  if ( 10 = this.op ) then%0A    result_val := mem_val + disp_val;%0A  // -%0A  elsif ( 11 = this.op ) then%0A    result_val := mem_val - disp_val;%0A  // *%0A  elsif ( 12 = this.op ) then%0A    result_val := mem_val * disp_val;%0A  // /%0A  elsif ( 13 = this.op ) then%0A    result_val := mem_val / disp_val;%0A  // no-op%0A  elsif ( -1 = this.op ) then%0A    result_val := disp_val;%0A  else%0A    // unknown operation%0A    generate Display.error( "Unknown operation" ) to this->R3.Display;%0A  end if;%0A  // store the value%0A  (this->R3.Memory).store( result_val );%0Aend service;,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
pragma,key_letter,,,,,,,
pragmaitem,"OP",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Calculator,,,,,,,
attribute,calc_id,preferred,unique,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,current_op,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,calc,Calculator,public,init,instance,,,
codeblock,disp : instance of Display;%0Amem : instance of Memory;%0Aop : instance of Operation;%0Abegin%0A  this.current_op := -1;%0A  disp := create Display( calc_id => this.calc_id%2C value => 0%2C whole_part => 0%2C fractional_part => 0%2C sign => 1%2C Current_State => displaying_memory_value );%0A  mem := create Memory( calc_id => this.calc_id%2C value => 0 );%0A  op := create Operation( calc_id => this.calc_id%2C op => -1 );%0A  link this R1 disp;%0A  link this R2 mem;%0A  link mem R3 disp using op;%0Aend service;,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
pragma,key_letter,,,,,,,
pragmaitem,"CALC",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
pragma,number,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
domain,,,,,,,,
