domain,keypad,,,,,,,
object,UI,,,,,,,
object,,,,,,,,
type,calcevent,private,structure%0A  event_type : eventtype;%0A  extra_data : integer;%0Aend structure,,,,,
type,,,,,,,,
type,eventtype,private,enum ( NULLEVT%2C KEYPRESS%2C CLEAR ),,,,,
type,,,,,,,,
routine,keypad,,public,error,,,,
parameter,message,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,keypad,,public,result,,,,
parameter,value,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,keypad,,private,connect,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,keypad,,private,init,,,,
codeblock,ui : instance of UI;%0Abegin%0A  ui := create unique UI( Current_State => idle%2C ticklen => @PT0.000001S@ );%0A  connect();%0A  schedule ui.ticker generate UI.tick() to ui delay ui.ticklen;%0Aend service;,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
routine,,,,,,,,
routine,keypad,,private,getPendingEvent,,,,
typeref,calcevent,,private,getPendingEvent,,,,
typeref,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,keyIO,,,,,,,
routine,keypad,,public,key,,,,
parameter,code,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,keypad,,public,clear,,,,
codeblock,begin%0A  null;%0Aend service;,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
object,UI,,,,,,,
attribute,ui_id,preferred,unique,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,ticker,,,,,,,
typeref,timer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,ticklen,,,,,,,
typeref,duration,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,UI,idle,,,,,
codeblock,begin%0A  // tick on an interval%0A  schedule this.ticker generate UI.tick() to this delay this.ticklen;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,UI,polling,,,,,
codeblock,evt : calcevent;%0Abegin%0A  // empty the pending event queue%0A  evt := getPendingEvent();%0A  while ( NULLEVT /= evt.event_type ) loop%0A    // send message%0A    if ( KEYPRESS = evt.event_type ) then%0A      keyIO~>key( evt.extra_data );%0A    elsif ( CLEAR = evt.event_type ) then%0A      keyIO~>clear();%0A    end if;%0A    // check for the next event%0A    evt := getPendingEvent();%0A  end loop;%0A  // go back to idle%0A  generate UI.done() to this;%0Aend state;,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,done,,,,,,,
event,,,,,,,,
event,tick,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,done,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,tick,Cannot_Happen,,,
transition,,,,,,,,
transition,idle,,,done,Cannot_Happen,,,
transition,,,,,,,,
transition,idle,,,tick,polling,,,
transition,,,,,,,,
transition,polling,,,done,idle,,,
transition,,,,,,,,
transition,polling,,,tick,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
object,,,,,,,,
pragma,number,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
domain,,,,,,,,
