-- BP 7.1 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

INSERT INTO SM_ISM
	VALUES ("5e38754d-b885-4c43-afd3-6164b395acf6",
	"1a3b9224-8068-4b0c-9d33-3dfc80fb9e89");
INSERT INTO SM_SM
	VALUES ("5e38754d-b885-4c43-afd3-6164b395acf6",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_EVTDI
	VALUES ("e2a4efad-837d-4b29-94b4-f772f5e11bef",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"4e087c82-3274-4fa2-bf02-949820ad02e7");
INSERT INTO SM_EVTDI
	VALUES ("ed10d891-f867-48c6-bafd-9dd34434e970",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d957b495-0508-46bb-9973-a7d024ac5460",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"e2a4efad-837d-4b29-94b4-f772f5e11bef");
INSERT INTO SM_EVTDI
	VALUES ("043b5030-34cc-4bae-8303-b33d55280b5f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"d957b495-0508-46bb-9973-a7d024ac5460");
INSERT INTO SM_EVTDI
	VALUES ("7e4c62eb-69c5-4b95-81fb-001914bedbef",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"19b4a7ed-7136-4fd5-a698-0acebe58c33b");
INSERT INTO SM_EVTDI
	VALUES ("4c2bbce7-3ef7-4f1b-9c08-932eb65b35f5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("4407063d-fc23-48ab-b26e-53dc67c2210f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"4c2bbce7-3ef7-4f1b-9c08-932eb65b35f5");
INSERT INTO SM_EVTDI
	VALUES ("04cbe645-2036-4105-945b-2cb67621b934",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"4407063d-fc23-48ab-b26e-53dc67c2210f");
INSERT INTO SM_EVTDI
	VALUES ("36bd5d3e-77f5-406a-b850-548cff306323",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"04cbe645-2036-4105-945b-2cb67621b934");
INSERT INTO SM_EVTDI
	VALUES ("01154577-49df-4d6b-b700-57d59394f4ab",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"36bd5d3e-77f5-406a-b850-548cff306323");
INSERT INTO SM_EVTDI
	VALUES ("9241b02a-19d4-418e-b0aa-67e881584522",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"043b5030-34cc-4bae-8303-b33d55280b5f");
INSERT INTO SM_EVTDI
	VALUES ("19b4a7ed-7136-4fd5-a698-0acebe58c33b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"4272bd99-c12e-4dc6-ad00-466c280c43e9");
INSERT INTO SM_EVTDI
	VALUES ("800c1864-6cbc-457f-b86f-8c747db67e3b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ba51d58c-239e-408e-b9ef-fc3f2a09ace5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"800c1864-6cbc-457f-b86f-8c747db67e3b");
INSERT INTO SM_EVTDI
	VALUES ("def5e926-ceb0-4e33-a928-d4354b143ea8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"ba51d58c-239e-408e-b9ef-fc3f2a09ace5");
INSERT INTO SM_EVTDI
	VALUES ("2023d0cc-b725-4e42-b74f-c0781fe2955c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"def5e926-ceb0-4e33-a928-d4354b143ea8");
INSERT INTO SM_EVTDI
	VALUES ("214b609d-1ae3-4072-b301-a0b8c881ea34",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("4272bd99-c12e-4dc6-ad00-466c280c43e9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"51b87972-b243-45a3-a36a-77bbecaddd3d");
INSERT INTO SM_EVTDI
	VALUES ("51b87972-b243-45a3-a36a-77bbecaddd3d",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"9241b02a-19d4-418e-b0aa-67e881584522");
INSERT INTO SM_EVTDI
	VALUES ("4e087c82-3274-4fa2-bf02-949820ad02e7",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"214b609d-1ae3-4072-b301-a0b8c881ea34");
INSERT INTO SM_EVTDI
	VALUES ("fe71a784-01cb-42a0-b932-e11e12ec7b1c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"b02ee18a-5622-4a17-ba0e-205cef2d61be");
INSERT INTO SM_EVTDI
	VALUES ("b02ee18a-5622-4a17-ba0e-205cef2d61be",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("895ce2a4-9eb1-4595-8422-92b7eb2f4f1a",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"fe71a784-01cb-42a0-b932-e11e12ec7b1c");
INSERT INTO SM_EVTDI
	VALUES ("ef63b7f0-bee9-4fb6-8ab5-eee425d98fa7",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"895ce2a4-9eb1-4595-8422-92b7eb2f4f1a");
INSERT INTO SM_EVTDI
	VALUES ("be279714-890a-4720-9f2a-c4236468c31d",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"ef63b7f0-bee9-4fb6-8ab5-eee425d98fa7");
INSERT INTO SM_EVTDI
	VALUES ("ae2367b7-7477-4ccf-88be-fd8aa7e4496e",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("62fd8903-b1d0-49ed-8de8-849c572539b8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("a627d914-52a7-4958-983f-1e61e14b2e85",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("75c26619-a794-4a77-ae8b-8e1dc22d6ca8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"ae2367b7-7477-4ccf-88be-fd8aa7e4496e");
INSERT INTO SM_EVTDI
	VALUES ("5a3fc7da-314d-4762-8550-b047417bf18d",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"62fd8903-b1d0-49ed-8de8-849c572539b8");
INSERT INTO SM_EVTDI
	VALUES ("59879646-ec41-40aa-9b00-2184ccf7e77b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"a627d914-52a7-4958-983f-1e61e14b2e85");
INSERT INTO SM_LEVT
	VALUES ("d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("407338dd-217c-4610-8f8c-4cec4198b449",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("17bc2766-c7a2-4539-980f-231141c3d9ee",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c27f1881-e107-423c-a00b-25444e261d5e",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d134cdec-b015-4779-b6a7-a6ccca62be01",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6904848b-3b05-4bd0-8673-5fac9d89b113",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b38fb763-c0d7-4a3f-9147-14001fd25378",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1fb4d7f5-3064-47be-ae94-434a16837e61",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e434e70-8246-43b7-9373-f49604df9366",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_STATE
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"593c6b90-0a6c-4420-9add-6a0310acc856",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("60040862-c912-4c67-8758-b608114c01e4",
	"f0aacfd4-723e-4f5f-868a-d95a38b460a0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0a86b391-39f6-4928-8baf-0a4b72e6ae21",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"17bc2766-c7a2-4539-980f-231141c3d9ee",
	"37417c0a-3ca6-4b81-a93b-4aa234dbcaad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("0a86b391-39f6-4928-8baf-0a4b72e6ae21",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("1b248fb5-916f-4d49-88ef-c665667f0cea",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	"bfed995c-60c6-48a8-ad6b-25b6d440296c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("1b248fb5-916f-4d49-88ef-c665667f0cea",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("bb1ebbf2-226b-4db4-87bf-ffc6c48beefa",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"5560f450-2859-46cd-b020-b8c1d8fe7cca",
	"1ee208c0-ac19-49eb-aaaa-e29c7c32aade",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("bb1ebbf2-226b-4db4-87bf-ffc6c48beefa",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"d134cdec-b015-4779-b6a7-a6ccca62be01",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ea8efd56-b5b0-46f7-82a0-4d9c2a7f33ab",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"d134cdec-b015-4779-b6a7-a6ccca62be01",
	"6a6d65d8-720a-4a05-a4cd-712efeec2ee9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("ea8efd56-b5b0-46f7-82a0-4d9c2a7f33ab",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"6904848b-3b05-4bd0-8673-5fac9d89b113",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("27c5727a-c25b-4997-81b3-7c0a76292cda",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"6904848b-3b05-4bd0-8673-5fac9d89b113",
	"48c0ee51-2d08-48c5-b62d-c21c2e7a7ae5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("27c5727a-c25b-4997-81b3-7c0a76292cda",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"b38fb763-c0d7-4a3f-9147-14001fd25378",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("80944dc3-8160-408e-bbf7-ab7f9ccd8b32",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"b38fb763-c0d7-4a3f-9147-14001fd25378",
	"37687fcc-960a-4904-a465-f687bb8888ae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("80944dc3-8160-408e-bbf7-ab7f9ccd8b32",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d72c8fcc-dccb-4da5-a9c5-0250c45e36d8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	"24384bf9-18a0-4a13-aaae-3169c1a37778",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("d72c8fcc-dccb-4da5-a9c5-0250c45e36d8",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"c27f1881-e107-423c-a00b-25444e261d5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("1889d649-4d73-497b-8780-c246427bc11f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1fb4d7f5-3064-47be-ae94-434a16837e61",
	"18522f07-a670-461b-bf4b-1c708eede033",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("1889d649-4d73-497b-8780-c246427bc11f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("812af116-02b7-4605-b7b7-faab11255c7b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	"c929d8db-f935-40a1-a11b-1e882a721ac8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("812af116-02b7-4605-b7b7-faab11255c7b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a1389dc4-888d-484b-9dbf-d78fa5a0deb0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"407338dd-217c-4610-8f8c-4cec4198b449",
	"d3ef96ae-2833-4680-98cd-8779e458d5e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("a1389dc4-888d-484b-9dbf-d78fa5a0deb0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"407338dd-217c-4610-8f8c-4cec4198b449",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("1fc6fbb0-8cc4-4276-a3d8-ef7ce1e24c18",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"10e1c681-131b-48ca-a79b-c512ab805f17",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("1fc6fbb0-8cc4-4276-a3d8-ef7ce1e24c18",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1fb4d7f5-3064-47be-ae94-434a16837e61",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("8aab05aa-f741-45a3-a62f-508e8666849f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"407338dd-217c-4610-8f8c-4cec4198b449",
	"dad07a16-946f-45f5-af97-b73695666c3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("8aab05aa-f741-45a3-a62f-508e8666849f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("6a372671-3e29-49b9-8d4b-2f0311a985fd",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"4d38a562-1518-43fa-a1a6-b95587df5dc9",
	"9e2bc241-3606-48c6-8184-f6d1287cae97",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("6a372671-3e29-49b9-8d4b-2f0311a985fd",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ba01ed58-ac4a-4169-9b78-2ec0a51ce3b3",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"310c7917-4c77-4100-b7d3-58c1fea09b4c",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("ba01ed58-ac4a-4169-9b78-2ec0a51ce3b3",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"3e434e70-8246-43b7-9373-f49604df9366",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4806250c-9ffc-46c8-8f56-7e567980c01c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"3e434e70-8246-43b7-9373-f49604df9366",
	"ad35b779-bea2-4d76-ba3a-d633772de482",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("4806250c-9ffc-46c8-8f56-7e567980c01c",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"60040862-c912-4c67-8758-b608114c01e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7cd2b532-5f8f-4564-bdbf-b72e00fe0155",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"60040862-c912-4c67-8758-b608114c01e4",
	"401ce9cc-102e-441c-95e8-79ce79dfb80f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("7cd2b532-5f8f-4564-bdbf-b72e00fe0155",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"17bc2766-c7a2-4539-980f-231141c3d9ee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("43d9c286-808f-4309-b28e-109534a14dbb",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"407338dd-217c-4610-8f8c-4cec4198b449");
INSERT INTO SM_AH
	VALUES ("43d9c286-808f-4309-b28e-109534a14dbb",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("43d9c286-808f-4309-b28e-109534a14dbb",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("2f9b508c-5ecb-487e-97ce-671671abd09b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"17bc2766-c7a2-4539-980f-231141c3d9ee");
INSERT INTO SM_AH
	VALUES ("2f9b508c-5ecb-487e-97ce-671671abd09b",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("2f9b508c-5ecb-487e-97ce-671671abd09b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("79105597-eade-48ae-a0f8-344d4490fe41",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"8fdce70d-ec18-4acc-905f-ed83d0ae6e7c");
INSERT INTO SM_AH
	VALUES ("79105597-eade-48ae-a0f8-344d4490fe41",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("79105597-eade-48ae-a0f8-344d4490fe41",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("5e0675ca-e3e0-4d2d-8bb3-6739d3b31ec9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"5560f450-2859-46cd-b020-b8c1d8fe7cca");
INSERT INTO SM_AH
	VALUES ("5e0675ca-e3e0-4d2d-8bb3-6739d3b31ec9",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("5e0675ca-e3e0-4d2d-8bb3-6739d3b31ec9",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("59d3cafd-564e-4956-b48d-d677190b67e3",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"c27f1881-e107-423c-a00b-25444e261d5e");
INSERT INTO SM_AH
	VALUES ("59d3cafd-564e-4956-b48d-d677190b67e3",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("59d3cafd-564e-4956-b48d-d677190b67e3",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("68da247b-9bae-4534-9cbd-af9cc6a0abe5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"d134cdec-b015-4779-b6a7-a6ccca62be01");
INSERT INTO SM_AH
	VALUES ("68da247b-9bae-4534-9cbd-af9cc6a0abe5",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("68da247b-9bae-4534-9cbd-af9cc6a0abe5",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("4597fcde-df56-4d95-b42a-c31fb60d6443",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"6904848b-3b05-4bd0-8673-5fac9d89b113");
INSERT INTO SM_AH
	VALUES ("4597fcde-df56-4d95-b42a-c31fb60d6443",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("4597fcde-df56-4d95-b42a-c31fb60d6443",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("89abb391-1200-4ba9-af86-b07d666593ba",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"b38fb763-c0d7-4a3f-9147-14001fd25378");
INSERT INTO SM_AH
	VALUES ("89abb391-1200-4ba9-af86-b07d666593ba",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("89abb391-1200-4ba9-af86-b07d666593ba",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("153f1acc-557c-46b5-9132-9f1b4fe718e4",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"a622d116-f39d-41bf-9e09-8e16a1a9cc0b");
INSERT INTO SM_AH
	VALUES ("153f1acc-557c-46b5-9132-9f1b4fe718e4",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("153f1acc-557c-46b5-9132-9f1b4fe718e4",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("f9d85862-8b20-493a-b50e-0f7fdd70878a",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1fb4d7f5-3064-47be-ae94-434a16837e61");
INSERT INTO SM_AH
	VALUES ("f9d85862-8b20-493a-b50e-0f7fdd70878a",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("f9d85862-8b20-493a-b50e-0f7fdd70878a",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'');
INSERT INTO SM_MOAH
	VALUES ("d3372d89-8ed1-4ff0-a74f-2cd64ed3e4c3",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1e5a9cb9-da5f-4ace-afe9-dbbcff54e181");
INSERT INTO SM_AH
	VALUES ("d3372d89-8ed1-4ff0-a74f-2cd64ed3e4c3",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("d3372d89-8ed1-4ff0-a74f-2cd64ed3e4c3",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("925f4ad6-7ac8-403f-957f-c5bb659c73b4",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"4d38a562-1518-43fa-a1a6-b95587df5dc9");
INSERT INTO SM_AH
	VALUES ("925f4ad6-7ac8-403f-957f-c5bb659c73b4",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("925f4ad6-7ac8-403f-957f-c5bb659c73b4",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("61db755c-2ee3-4f8a-acc7-39f9b92cb6b0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"f8bd9980-4a7f-4c15-8994-b9a27f17cdd3");
INSERT INTO SM_AH
	VALUES ("61db755c-2ee3-4f8a-acc7-39f9b92cb6b0",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("61db755c-2ee3-4f8a-acc7-39f9b92cb6b0",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'');
INSERT INTO SM_MOAH
	VALUES ("418cbf18-9a52-430d-a39c-0c3058bee049",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"310c7917-4c77-4100-b7d3-58c1fea09b4c");
INSERT INTO SM_AH
	VALUES ("418cbf18-9a52-430d-a39c-0c3058bee049",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("418cbf18-9a52-430d-a39c-0c3058bee049",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("42900059-7b51-4b5a-9059-32f7aecccb28",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"3e434e70-8246-43b7-9373-f49604df9366");
INSERT INTO SM_AH
	VALUES ("42900059-7b51-4b5a-9059-32f7aecccb28",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("42900059-7b51-4b5a-9059-32f7aecccb28",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'');
INSERT INTO SM_MOAH
	VALUES ("a8be8ca6-64af-4198-8176-64fee84a1391",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"60040862-c912-4c67-8758-b608114c01e4");
INSERT INTO SM_AH
	VALUES ("a8be8ca6-64af-4198-8176-64fee84a1391",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("a8be8ca6-64af-4198-8176-64fee84a1391",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'');
INSERT INTO SM_TAH
	VALUES ("836556bd-4dc8-4029-a7cb-febbc6897fcb",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"0a86b391-39f6-4928-8baf-0a4b72e6ae21");
INSERT INTO SM_AH
	VALUES ("836556bd-4dc8-4029-a7cb-febbc6897fcb",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("836556bd-4dc8-4029-a7cb-febbc6897fcb",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("45d397d2-b210-4a03-b238-d0916db56924",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1b248fb5-916f-4d49-88ef-c665667f0cea");
INSERT INTO SM_AH
	VALUES ("45d397d2-b210-4a03-b238-d0916db56924",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("45d397d2-b210-4a03-b238-d0916db56924",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("d3254a3f-b1c7-41b2-b62e-f889d9d37ab6",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"bb1ebbf2-226b-4db4-87bf-ffc6c48beefa");
INSERT INTO SM_AH
	VALUES ("d3254a3f-b1c7-41b2-b62e-f889d9d37ab6",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("d3254a3f-b1c7-41b2-b62e-f889d9d37ab6",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("ffe20918-a6f1-4af4-8666-4b17b06c15aa",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"ea8efd56-b5b0-46f7-82a0-4d9c2a7f33ab");
INSERT INTO SM_AH
	VALUES ("ffe20918-a6f1-4af4-8666-4b17b06c15aa",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("ffe20918-a6f1-4af4-8666-4b17b06c15aa",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("8477c24a-4864-4de2-aae9-dd9c2d22eb43",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"27c5727a-c25b-4997-81b3-7c0a76292cda");
INSERT INTO SM_AH
	VALUES ("8477c24a-4864-4de2-aae9-dd9c2d22eb43",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("8477c24a-4864-4de2-aae9-dd9c2d22eb43",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("16da8280-ad1a-4602-a510-8cc902ff8356",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"80944dc3-8160-408e-bbf7-ab7f9ccd8b32");
INSERT INTO SM_AH
	VALUES ("16da8280-ad1a-4602-a510-8cc902ff8356",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("16da8280-ad1a-4602-a510-8cc902ff8356",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("89d1bea2-bc50-47b7-84a7-2c50b07d0d5f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"d72c8fcc-dccb-4da5-a9c5-0250c45e36d8");
INSERT INTO SM_AH
	VALUES ("89d1bea2-bc50-47b7-84a7-2c50b07d0d5f",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("89d1bea2-bc50-47b7-84a7-2c50b07d0d5f",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("107d71f6-5931-41c8-85dd-45aaa197dc28",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1889d649-4d73-497b-8780-c246427bc11f");
INSERT INTO SM_AH
	VALUES ("107d71f6-5931-41c8-85dd-45aaa197dc28",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("107d71f6-5931-41c8-85dd-45aaa197dc28",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("34c3f46c-f271-4cc9-a0d1-0ab55da9e210",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"812af116-02b7-4605-b7b7-faab11255c7b");
INSERT INTO SM_AH
	VALUES ("34c3f46c-f271-4cc9-a0d1-0ab55da9e210",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("34c3f46c-f271-4cc9-a0d1-0ab55da9e210",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("f9122bbf-0784-4ed6-a1ce-45df2752987e",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"a1389dc4-888d-484b-9dbf-d78fa5a0deb0");
INSERT INTO SM_AH
	VALUES ("f9122bbf-0784-4ed6-a1ce-45df2752987e",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("f9122bbf-0784-4ed6-a1ce-45df2752987e",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("82237864-68ad-4853-b328-c267716c5838",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"1fc6fbb0-8cc4-4276-a3d8-ef7ce1e24c18");
INSERT INTO SM_AH
	VALUES ("82237864-68ad-4853-b328-c267716c5838",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("82237864-68ad-4853-b328-c267716c5838",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("2db07a77-7d23-4738-92a8-f9612ff8a0ea",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"8aab05aa-f741-45a3-a62f-508e8666849f");
INSERT INTO SM_AH
	VALUES ("2db07a77-7d23-4738-92a8-f9612ff8a0ea",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("2db07a77-7d23-4738-92a8-f9612ff8a0ea",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("748c7b93-cd4c-4d99-b602-311211afb35b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"6a372671-3e29-49b9-8d4b-2f0311a985fd");
INSERT INTO SM_AH
	VALUES ("748c7b93-cd4c-4d99-b602-311211afb35b",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("748c7b93-cd4c-4d99-b602-311211afb35b",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("ba0dc582-50d4-4152-9639-cc243e16b7cf",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"ba01ed58-ac4a-4169-9b78-2ec0a51ce3b3");
INSERT INTO SM_AH
	VALUES ("ba0dc582-50d4-4152-9639-cc243e16b7cf",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("ba0dc582-50d4-4152-9639-cc243e16b7cf",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("d9c22ef7-4eca-4b28-8c84-ac9f9c79dc41",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"4806250c-9ffc-46c8-8f56-7e567980c01c");
INSERT INTO SM_AH
	VALUES ("d9c22ef7-4eca-4b28-8c84-ac9f9c79dc41",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("d9c22ef7-4eca-4b28-8c84-ac9f9c79dc41",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO SM_TAH
	VALUES ("a4c32226-16cc-424e-a190-fb8ddd84e0dc",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	"7cd2b532-5f8f-4564-bdbf-b72e00fe0155");
INSERT INTO SM_AH
	VALUES ("a4c32226-16cc-424e-a190-fb8ddd84e0dc",
	"5e38754d-b885-4c43-afd3-6164b395acf6");
INSERT INTO SM_ACT
	VALUES ("a4c32226-16cc-424e-a190-fb8ddd84e0dc",
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	1,
	'',
	'');
INSERT INTO GD_MD
	VALUES ("aa8c958f-75b2-4c12-a610-77ed291cf4da",
	8,
	"5e38754d-b885-4c43-afd3-6164b395acf6",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("5dbcae56-680e-4c9c-9f98-1daf278f2d7c",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"407338dd-217c-4610-8f8c-4cec4198b449",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("5dbcae56-680e-4c9c-9f98-1daf278f2d7c");
INSERT INTO GD_NCS
	VALUES ("5dbcae56-680e-4c9c-9f98-1daf278f2d7c");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"5dbcae56-680e-4c9c-9f98-1daf278f2d7c");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"5dbcae56-680e-4c9c-9f98-1daf278f2d7c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5dbcae56-680e-4c9c-9f98-1daf278f2d7c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("daab9cf6-e33c-4aef-94ab-87d7030e9a12",
	752.000000,
	1408.000000,
	"5dbcae56-680e-4c9c-9f98-1daf278f2d7c");
INSERT INTO DIM_CON
	VALUES ("ad151a93-1cc5-457a-836a-3a9c40b5c8e9",
	784.000000,
	1360.000000,
	"5dbcae56-680e-4c9c-9f98-1daf278f2d7c");
INSERT INTO DIM_CON
	VALUES ("be29c954-029e-49aa-995c-7e1abe20957e",
	928.000000,
	1456.000000,
	"5dbcae56-680e-4c9c-9f98-1daf278f2d7c");
INSERT INTO GD_GE
	VALUES ("85ce3493-d194-4284-a191-8b9a76fcb497",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"17bc2766-c7a2-4539-980f-231141c3d9ee",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("85ce3493-d194-4284-a191-8b9a76fcb497");
INSERT INTO GD_NCS
	VALUES ("85ce3493-d194-4284-a191-8b9a76fcb497");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"85ce3493-d194-4284-a191-8b9a76fcb497");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"85ce3493-d194-4284-a191-8b9a76fcb497",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("85ce3493-d194-4284-a191-8b9a76fcb497",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("34aca04a-0d9a-48ac-bba2-fb659421d9f7",
	2128.000000,
	1616.000000,
	"85ce3493-d194-4284-a191-8b9a76fcb497");
INSERT INTO DIM_CON
	VALUES ("86ab9732-a117-4d9b-a830-460c28c2305b",
	1712.000000,
	1568.000000,
	"85ce3493-d194-4284-a191-8b9a76fcb497");
INSERT INTO GD_GE
	VALUES ("86adbf3d-aca2-406a-bebc-da9f2838a599",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"8fdce70d-ec18-4acc-905f-ed83d0ae6e7c",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("86adbf3d-aca2-406a-bebc-da9f2838a599");
INSERT INTO GD_NCS
	VALUES ("86adbf3d-aca2-406a-bebc-da9f2838a599");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"86adbf3d-aca2-406a-bebc-da9f2838a599");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"86adbf3d-aca2-406a-bebc-da9f2838a599",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("86adbf3d-aca2-406a-bebc-da9f2838a599",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("74e20ae0-5412-4903-bd07-39b88230901f",
	2128.000000,
	1760.000000,
	"86adbf3d-aca2-406a-bebc-da9f2838a599");
INSERT INTO DIM_CON
	VALUES ("96342e79-1b0a-44ef-b84d-3cb020cc7a3d",
	2128.000000,
	1792.000000,
	"86adbf3d-aca2-406a-bebc-da9f2838a599");
INSERT INTO GD_GE
	VALUES ("e9d50830-50d3-4795-a77e-2e3c0bd3795f",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"5560f450-2859-46cd-b020-b8c1d8fe7cca",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("e9d50830-50d3-4795-a77e-2e3c0bd3795f");
INSERT INTO GD_NCS
	VALUES ("e9d50830-50d3-4795-a77e-2e3c0bd3795f");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"e9d50830-50d3-4795-a77e-2e3c0bd3795f");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"e9d50830-50d3-4795-a77e-2e3c0bd3795f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e9d50830-50d3-4795-a77e-2e3c0bd3795f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0811163a-737a-45f8-ab85-85557108ae76",
	2128.000000,
	1920.000000,
	"e9d50830-50d3-4795-a77e-2e3c0bd3795f");
INSERT INTO DIM_CON
	VALUES ("0d37c8e7-202f-45ab-a04f-45a9ceee8b84",
	2128.000000,
	1952.000000,
	"e9d50830-50d3-4795-a77e-2e3c0bd3795f");
INSERT INTO GD_GE
	VALUES ("c82a2d42-2cea-419d-bfa5-f3b9b323c275",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"c27f1881-e107-423c-a00b-25444e261d5e",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("c82a2d42-2cea-419d-bfa5-f3b9b323c275");
INSERT INTO GD_NCS
	VALUES ("c82a2d42-2cea-419d-bfa5-f3b9b323c275");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"c82a2d42-2cea-419d-bfa5-f3b9b323c275");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"c82a2d42-2cea-419d-bfa5-f3b9b323c275",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c82a2d42-2cea-419d-bfa5-f3b9b323c275",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("10b36c36-acbb-4c58-bfb5-51ed3456c1ca",
	2592.000000,
	1632.000000,
	"c82a2d42-2cea-419d-bfa5-f3b9b323c275");
INSERT INTO GD_GE
	VALUES ("cbe5e607-e9ee-4e7b-a867-851a46e6d9f2",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"d134cdec-b015-4779-b6a7-a6ccca62be01",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("cbe5e607-e9ee-4e7b-a867-851a46e6d9f2");
INSERT INTO GD_NCS
	VALUES ("cbe5e607-e9ee-4e7b-a867-851a46e6d9f2");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"cbe5e607-e9ee-4e7b-a867-851a46e6d9f2");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"cbe5e607-e9ee-4e7b-a867-851a46e6d9f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cbe5e607-e9ee-4e7b-a867-851a46e6d9f2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6ef2825a-0b59-4537-8e47-aff5cfb0ea65",
	2128.000000,
	2048.000000,
	"cbe5e607-e9ee-4e7b-a867-851a46e6d9f2");
INSERT INTO DIM_CON
	VALUES ("b0a089f0-2234-49a2-a31b-cd48537460bc",
	2128.000000,
	2080.000000,
	"cbe5e607-e9ee-4e7b-a867-851a46e6d9f2");
INSERT INTO GD_GE
	VALUES ("a50f26a4-2fbf-4af2-a082-7460cc8e7302",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"6904848b-3b05-4bd0-8673-5fac9d89b113",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("a50f26a4-2fbf-4af2-a082-7460cc8e7302");
INSERT INTO GD_NCS
	VALUES ("a50f26a4-2fbf-4af2-a082-7460cc8e7302");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"a50f26a4-2fbf-4af2-a082-7460cc8e7302");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"a50f26a4-2fbf-4af2-a082-7460cc8e7302",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a50f26a4-2fbf-4af2-a082-7460cc8e7302",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3df9b392-b847-4ac7-a737-4d3c797529e3",
	2400.000000,
	2080.000000,
	"a50f26a4-2fbf-4af2-a082-7460cc8e7302");
INSERT INTO DIM_CON
	VALUES ("37117f88-3be4-4df0-9b4b-674501e68f04",
	2608.000000,
	2016.000000,
	"a50f26a4-2fbf-4af2-a082-7460cc8e7302");
INSERT INTO GD_GE
	VALUES ("2ffe63c0-51e7-408a-a66b-af5bc8a6441c",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"b38fb763-c0d7-4a3f-9147-14001fd25378",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("2ffe63c0-51e7-408a-a66b-af5bc8a6441c");
INSERT INTO GD_NCS
	VALUES ("2ffe63c0-51e7-408a-a66b-af5bc8a6441c");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"2ffe63c0-51e7-408a-a66b-af5bc8a6441c");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"2ffe63c0-51e7-408a-a66b-af5bc8a6441c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2ffe63c0-51e7-408a-a66b-af5bc8a6441c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ae7b42a9-4ada-49a2-9ce4-461a3775bbb8",
	2608.000000,
	1968.000000,
	"2ffe63c0-51e7-408a-a66b-af5bc8a6441c");
INSERT INTO DIM_CON
	VALUES ("40b2be85-bb21-4fac-a048-45ea39f5c408",
	2608.000000,
	1872.000000,
	"2ffe63c0-51e7-408a-a66b-af5bc8a6441c");
INSERT INTO GD_GE
	VALUES ("e90942f7-d8db-4f14-96d5-c6a3c8cbae81",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"a622d116-f39d-41bf-9e09-8e16a1a9cc0b",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("e90942f7-d8db-4f14-96d5-c6a3c8cbae81");
INSERT INTO GD_NCS
	VALUES ("e90942f7-d8db-4f14-96d5-c6a3c8cbae81");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"e90942f7-d8db-4f14-96d5-c6a3c8cbae81");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"e90942f7-d8db-4f14-96d5-c6a3c8cbae81",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e90942f7-d8db-4f14-96d5-c6a3c8cbae81",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c4043b6d-fa9b-4ddb-aafc-929469fe2466",
	2608.000000,
	1808.000000,
	"e90942f7-d8db-4f14-96d5-c6a3c8cbae81");
INSERT INTO DIM_CON
	VALUES ("1122dbae-ddf6-4d55-8b91-09a07cd4963f",
	2592.000000,
	1712.000000,
	"e90942f7-d8db-4f14-96d5-c6a3c8cbae81");
INSERT INTO GD_GE
	VALUES ("ba838abb-b3e3-4664-aad6-8bde97862368",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"1fb4d7f5-3064-47be-ae94-434a16837e61",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("ba838abb-b3e3-4664-aad6-8bde97862368");
INSERT INTO GD_NCS
	VALUES ("ba838abb-b3e3-4664-aad6-8bde97862368");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"ba838abb-b3e3-4664-aad6-8bde97862368");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"ba838abb-b3e3-4664-aad6-8bde97862368",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba838abb-b3e3-4664-aad6-8bde97862368",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("604d1b6b-a7aa-4c09-bd0f-850a37d408b5",
	928.000000,
	1776.000000,
	"ba838abb-b3e3-4664-aad6-8bde97862368");
INSERT INTO DIM_CON
	VALUES ("a4079e78-ff80-455a-a3ff-25874529e648",
	928.000000,
	1680.000000,
	"ba838abb-b3e3-4664-aad6-8bde97862368");
INSERT INTO GD_GE
	VALUES ("d3ecf1e0-7095-47b7-82de-64db205f7343",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"1e5a9cb9-da5f-4ace-afe9-dbbcff54e181",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("d3ecf1e0-7095-47b7-82de-64db205f7343");
INSERT INTO GD_NCS
	VALUES ("d3ecf1e0-7095-47b7-82de-64db205f7343");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"d3ecf1e0-7095-47b7-82de-64db205f7343");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"d3ecf1e0-7095-47b7-82de-64db205f7343",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d3ecf1e0-7095-47b7-82de-64db205f7343",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b5fc3744-3ca6-4586-8556-862592c1242f",
	928.000000,
	1840.000000,
	"d3ecf1e0-7095-47b7-82de-64db205f7343");
INSERT INTO DIM_CON
	VALUES ("68411d8f-aa39-40d7-8d56-e4d99d87f360",
	928.000000,
	1936.000000,
	"d3ecf1e0-7095-47b7-82de-64db205f7343");
INSERT INTO GD_GE
	VALUES ("263e9852-4ef4-4b4a-88e8-fb804fa2b146",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"4d38a562-1518-43fa-a1a6-b95587df5dc9",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("263e9852-4ef4-4b4a-88e8-fb804fa2b146");
INSERT INTO GD_NCS
	VALUES ("263e9852-4ef4-4b4a-88e8-fb804fa2b146");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"263e9852-4ef4-4b4a-88e8-fb804fa2b146");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"263e9852-4ef4-4b4a-88e8-fb804fa2b146",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("263e9852-4ef4-4b4a-88e8-fb804fa2b146",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4766c3c8-07d0-4721-917b-ca5cf721ed72",
	928.000000,
	2016.000000,
	"263e9852-4ef4-4b4a-88e8-fb804fa2b146");
INSERT INTO DIM_CON
	VALUES ("088668a6-6550-4d24-98b4-b5d0b70c0817",
	1072.000000,
	2080.000000,
	"263e9852-4ef4-4b4a-88e8-fb804fa2b146");
INSERT INTO GD_GE
	VALUES ("a0a19a38-0e02-47c2-b748-7c46359dad0f",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"f8bd9980-4a7f-4c15-8994-b9a27f17cdd3",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("a0a19a38-0e02-47c2-b748-7c46359dad0f");
INSERT INTO GD_NCS
	VALUES ("a0a19a38-0e02-47c2-b748-7c46359dad0f");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"a0a19a38-0e02-47c2-b748-7c46359dad0f");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"a0a19a38-0e02-47c2-b748-7c46359dad0f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a0a19a38-0e02-47c2-b748-7c46359dad0f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("955fc9a2-fe4a-457d-b1a8-ef87f0766cd6",
	928.000000,
	1616.000000,
	"a0a19a38-0e02-47c2-b748-7c46359dad0f");
INSERT INTO DIM_CON
	VALUES ("890011d9-b031-4a4d-87a4-a4c292d8b2c1",
	928.000000,
	1536.000000,
	"a0a19a38-0e02-47c2-b748-7c46359dad0f");
INSERT INTO GD_GE
	VALUES ("56f110db-3968-4895-922a-d2a155f901b0",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"310c7917-4c77-4100-b7d3-58c1fea09b4c",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("56f110db-3968-4895-922a-d2a155f901b0");
INSERT INTO GD_NCS
	VALUES ("56f110db-3968-4895-922a-d2a155f901b0");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"56f110db-3968-4895-922a-d2a155f901b0");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"56f110db-3968-4895-922a-d2a155f901b0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56f110db-3968-4895-922a-d2a155f901b0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b9ffade8-168a-431e-81bf-3270b5b45ff7",
	1280.000000,
	1376.000000,
	"56f110db-3968-4895-922a-d2a155f901b0");
INSERT INTO DIM_CON
	VALUES ("ffb8b856-e2ec-49e0-85fd-e1eeae450d1a",
	1424.000000,
	1456.000000,
	"56f110db-3968-4895-922a-d2a155f901b0");
INSERT INTO GD_GE
	VALUES ("a5a74310-c6db-4337-9c46-fb4d19f59497",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"3e434e70-8246-43b7-9373-f49604df9366",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("a5a74310-c6db-4337-9c46-fb4d19f59497");
INSERT INTO GD_NCS
	VALUES ("a5a74310-c6db-4337-9c46-fb4d19f59497");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"a5a74310-c6db-4337-9c46-fb4d19f59497");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"a5a74310-c6db-4337-9c46-fb4d19f59497",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5a74310-c6db-4337-9c46-fb4d19f59497",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("e0677821-3f47-4025-87f3-0b96fc13381c",
	1424.000000,
	1520.000000,
	"a5a74310-c6db-4337-9c46-fb4d19f59497");
INSERT INTO DIM_CON
	VALUES ("ba8aed5d-a8a1-4eca-8623-7f3c71b4b3be",
	1456.000000,
	1616.000000,
	"a5a74310-c6db-4337-9c46-fb4d19f59497");
INSERT INTO GD_GE
	VALUES ("95c8a20b-0ac7-42b8-a891-615fc2b40c79",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"60040862-c912-4c67-8758-b608114c01e4",
	41,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("95c8a20b-0ac7-42b8-a891-615fc2b40c79");
INSERT INTO GD_NCS
	VALUES ("95c8a20b-0ac7-42b8-a891-615fc2b40c79");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"95c8a20b-0ac7-42b8-a891-615fc2b40c79");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"95c8a20b-0ac7-42b8-a891-615fc2b40c79",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("95c8a20b-0ac7-42b8-a891-615fc2b40c79",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("06e8ebae-7bba-4011-ae46-1ce9c77d1248",
	1456.000000,
	1680.000000,
	"95c8a20b-0ac7-42b8-a891-615fc2b40c79");
INSERT INTO DIM_CON
	VALUES ("b52c01a3-f2c5-4ad7-8571-fddd26dbb91c",
	1600.000000,
	1728.000000,
	"95c8a20b-0ac7-42b8-a891-615fc2b40c79");
INSERT INTO GD_GE
	VALUES ("303b8c41-62d5-4304-968d-6d1f01ceb817",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"0a86b391-39f6-4928-8baf-0a4b72e6ae21",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("303b8c41-62d5-4304-968d-6d1f01ceb817",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7d7498b7-e37f-49eb-8bd4-ea4e9ba3e3b5",
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7d7498b7-e37f-49eb-8bd4-ea4e9ba3e3b5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7d7498b7-e37f-49eb-8bd4-ea4e9ba3e3b5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7d7498b7-e37f-49eb-8bd4-ea4e9ba3e3b5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("62a278eb-d5c3-476f-b409-91a07a8bcf08",
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"62a278eb-d5c3-476f-b409-91a07a8bcf08");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"62a278eb-d5c3-476f-b409-91a07a8bcf08",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("62a278eb-d5c3-476f-b409-91a07a8bcf08",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("26f30ddc-3ced-4246-9cd3-33f736bcc8a1",
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"26f30ddc-3ced-4246-9cd3-33f736bcc8a1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"26f30ddc-3ced-4246-9cd3-33f736bcc8a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("26f30ddc-3ced-4246-9cd3-33f736bcc8a1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ed47659a-f38a-46d8-9bcb-1a539a4074a8",
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"00000000-0000-0000-0000-000000000000",
	"6ed612f4-21b1-4e6f-ac64-fc95c58eb16d",
	"2a35653a-91fc-4941-9934-d5364f08bbf9");
INSERT INTO GD_LS
	VALUES ("81fc2013-b5f4-492d-b5c8-9a4b56cce8de",
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"ed47659a-f38a-46d8-9bcb-1a539a4074a8",
	"2a35653a-91fc-4941-9934-d5364f08bbf9",
	"9821394d-fb68-4c5f-83af-67a9371c995f");
INSERT INTO GD_LS
	VALUES ("b229a409-6e4c-4d50-b983-764382a5330f",
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"81fc2013-b5f4-492d-b5c8-9a4b56cce8de",
	"9821394d-fb68-4c5f-83af-67a9371c995f",
	"ea04b43a-40b9-4567-a499-6f8256605e5f");
INSERT INTO DIM_WAY
	VALUES ("6ed612f4-21b1-4e6f-ac64-fc95c58eb16d",
	2128.000000,
	1616.000000,
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2a35653a-91fc-4941-9934-d5364f08bbf9",
	2176.000000,
	1616.000000,
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"00000000-0000-0000-0000-000000000000",
	"6ed612f4-21b1-4e6f-ac64-fc95c58eb16d");
INSERT INTO DIM_WAY
	VALUES ("9821394d-fb68-4c5f-83af-67a9371c995f",
	2176.000000,
	1760.000000,
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"00000000-0000-0000-0000-000000000000",
	"2a35653a-91fc-4941-9934-d5364f08bbf9");
INSERT INTO DIM_WAY
	VALUES ("ea04b43a-40b9-4567-a499-6f8256605e5f",
	2128.000000,
	1760.000000,
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"00000000-0000-0000-0000-000000000000",
	"9821394d-fb68-4c5f-83af-67a9371c995f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"303b8c41-62d5-4304-968d-6d1f01ceb817",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("303b8c41-62d5-4304-968d-6d1f01ceb817",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("34aca04a-0d9a-48ac-bba2-fb659421d9f7",
	"74e20ae0-5412-4903-bd07-39b88230901f",
	"303b8c41-62d5-4304-968d-6d1f01ceb817");
INSERT INTO GD_GE
	VALUES ("ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"1b248fb5-916f-4d49-88ef-c665667f0cea",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7ca08e49-ce13-4c74-8e48-887e1cdd3318",
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7ca08e49-ce13-4c74-8e48-887e1cdd3318");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7ca08e49-ce13-4c74-8e48-887e1cdd3318",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7ca08e49-ce13-4c74-8e48-887e1cdd3318",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("35312acb-613e-4c29-a94d-45b4a2588d72",
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"35312acb-613e-4c29-a94d-45b4a2588d72");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"35312acb-613e-4c29-a94d-45b4a2588d72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35312acb-613e-4c29-a94d-45b4a2588d72",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ad69fa93-dd62-4b59-95f6-c4b4a3fcd0fc",
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ad69fa93-dd62-4b59-95f6-c4b4a3fcd0fc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ad69fa93-dd62-4b59-95f6-c4b4a3fcd0fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ad69fa93-dd62-4b59-95f6-c4b4a3fcd0fc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0586ff37-cbe9-4504-b97f-593ef8d6a875",
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"00000000-0000-0000-0000-000000000000",
	"73721e87-30cd-44c3-8fcb-7eb4ad983236",
	"92fb84d3-767f-4b90-8532-b55de87485f1");
INSERT INTO GD_LS
	VALUES ("06e3ca54-f054-444f-a2f8-290bb17bc05e",
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"0586ff37-cbe9-4504-b97f-593ef8d6a875",
	"92fb84d3-767f-4b90-8532-b55de87485f1",
	"189e47ef-66aa-47b7-b622-6bcbf02963e5");
INSERT INTO GD_LS
	VALUES ("66a0f936-9a19-4f8d-8bc7-152ee1e83e19",
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"06e3ca54-f054-444f-a2f8-290bb17bc05e",
	"189e47ef-66aa-47b7-b622-6bcbf02963e5",
	"93387fb4-99dd-40fe-b19b-2fb5497f6138");
INSERT INTO DIM_WAY
	VALUES ("73721e87-30cd-44c3-8fcb-7eb4ad983236",
	2128.000000,
	1792.000000,
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("92fb84d3-767f-4b90-8532-b55de87485f1",
	2176.000000,
	1792.000000,
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"00000000-0000-0000-0000-000000000000",
	"73721e87-30cd-44c3-8fcb-7eb4ad983236");
INSERT INTO DIM_WAY
	VALUES ("189e47ef-66aa-47b7-b622-6bcbf02963e5",
	2176.000000,
	1920.000000,
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"00000000-0000-0000-0000-000000000000",
	"92fb84d3-767f-4b90-8532-b55de87485f1");
INSERT INTO DIM_WAY
	VALUES ("93387fb4-99dd-40fe-b19b-2fb5497f6138",
	2128.000000,
	1920.000000,
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"00000000-0000-0000-0000-000000000000",
	"189e47ef-66aa-47b7-b622-6bcbf02963e5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ae804307-b5d0-4fe3-aaff-931a8ce7c30b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("96342e79-1b0a-44ef-b84d-3cb020cc7a3d",
	"0811163a-737a-45f8-ab85-85557108ae76",
	"ae804307-b5d0-4fe3-aaff-931a8ce7c30b");
INSERT INTO GD_GE
	VALUES ("0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"bb1ebbf2-226b-4db4-87bf-ffc6c48beefa",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ecf41857-ed52-41c0-b9a3-c7abd1fc5026",
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ecf41857-ed52-41c0-b9a3-c7abd1fc5026");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ecf41857-ed52-41c0-b9a3-c7abd1fc5026",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ecf41857-ed52-41c0-b9a3-c7abd1fc5026",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0c212adb-daca-4bb7-bf39-12778bbc8029",
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"0c212adb-daca-4bb7-bf39-12778bbc8029");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"0c212adb-daca-4bb7-bf39-12778bbc8029",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0c212adb-daca-4bb7-bf39-12778bbc8029",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3840b5f7-43e6-4935-9bd9-e1c1779642d1",
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3840b5f7-43e6-4935-9bd9-e1c1779642d1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3840b5f7-43e6-4935-9bd9-e1c1779642d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3840b5f7-43e6-4935-9bd9-e1c1779642d1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("053b9f78-9818-4e17-8f0a-0ec7bd679f7d",
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"00000000-0000-0000-0000-000000000000",
	"00f0356c-e648-465d-9b1a-0fb451d5eb22",
	"1d4f46b6-3758-4fd8-923a-723a15cf9268");
INSERT INTO GD_LS
	VALUES ("e05372b2-1909-47e2-b6ce-e11f3bbaab53",
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"053b9f78-9818-4e17-8f0a-0ec7bd679f7d",
	"1d4f46b6-3758-4fd8-923a-723a15cf9268",
	"b56e58f3-7a8f-4cd4-a685-455c9f86e9d8");
INSERT INTO GD_LS
	VALUES ("04d3d0d7-3d04-45f9-80e5-8f3cf71506b4",
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"e05372b2-1909-47e2-b6ce-e11f3bbaab53",
	"b56e58f3-7a8f-4cd4-a685-455c9f86e9d8",
	"bff2273b-5cc7-4448-8cf7-31c2d7714002");
INSERT INTO DIM_WAY
	VALUES ("00f0356c-e648-465d-9b1a-0fb451d5eb22",
	2128.000000,
	1952.000000,
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1d4f46b6-3758-4fd8-923a-723a15cf9268",
	2176.000000,
	1952.000000,
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"00000000-0000-0000-0000-000000000000",
	"00f0356c-e648-465d-9b1a-0fb451d5eb22");
INSERT INTO DIM_WAY
	VALUES ("b56e58f3-7a8f-4cd4-a685-455c9f86e9d8",
	2176.000000,
	2048.000000,
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"00000000-0000-0000-0000-000000000000",
	"1d4f46b6-3758-4fd8-923a-723a15cf9268");
INSERT INTO DIM_WAY
	VALUES ("bff2273b-5cc7-4448-8cf7-31c2d7714002",
	2128.000000,
	2048.000000,
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"00000000-0000-0000-0000-000000000000",
	"b56e58f3-7a8f-4cd4-a685-455c9f86e9d8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0dd7bdba-edbe-4f8b-917f-0e555e7df5e6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0d37c8e7-202f-45ab-a04f-45a9ceee8b84",
	"6ef2825a-0b59-4537-8e47-aff5cfb0ea65",
	"0dd7bdba-edbe-4f8b-917f-0e555e7df5e6");
INSERT INTO GD_GE
	VALUES ("67fb6210-2439-451d-b41c-cfe44143f988",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"ea8efd56-b5b0-46f7-82a0-4d9c2a7f33ab",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("67fb6210-2439-451d-b41c-cfe44143f988",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("249c105d-1acd-4c19-9f1f-ac421bdce3b0",
	"67fb6210-2439-451d-b41c-cfe44143f988",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"249c105d-1acd-4c19-9f1f-ac421bdce3b0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"249c105d-1acd-4c19-9f1f-ac421bdce3b0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("249c105d-1acd-4c19-9f1f-ac421bdce3b0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9c6790c0-3fb4-4123-83a6-00e42ab93dc1",
	"67fb6210-2439-451d-b41c-cfe44143f988",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"9c6790c0-3fb4-4123-83a6-00e42ab93dc1");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"9c6790c0-3fb4-4123-83a6-00e42ab93dc1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c6790c0-3fb4-4123-83a6-00e42ab93dc1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d9d6a1f0-6fed-447b-8fb0-2acafd027daf",
	"67fb6210-2439-451d-b41c-cfe44143f988",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d9d6a1f0-6fed-447b-8fb0-2acafd027daf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d9d6a1f0-6fed-447b-8fb0-2acafd027daf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d9d6a1f0-6fed-447b-8fb0-2acafd027daf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("acdb274b-56d9-4408-b690-4046e6103e3e",
	"67fb6210-2439-451d-b41c-cfe44143f988",
	"00000000-0000-0000-0000-000000000000",
	"ac0eedad-2571-4a07-ac26-a3df76d6c1ea",
	"da21bc09-fd4c-459a-89db-accdbe675282");
INSERT INTO DIM_WAY
	VALUES ("ac0eedad-2571-4a07-ac26-a3df76d6c1ea",
	2128.000000,
	2080.000000,
	"67fb6210-2439-451d-b41c-cfe44143f988",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("da21bc09-fd4c-459a-89db-accdbe675282",
	2400.000000,
	2080.000000,
	"67fb6210-2439-451d-b41c-cfe44143f988",
	"00000000-0000-0000-0000-000000000000",
	"ac0eedad-2571-4a07-ac26-a3df76d6c1ea");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"67fb6210-2439-451d-b41c-cfe44143f988",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("67fb6210-2439-451d-b41c-cfe44143f988",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b0a089f0-2234-49a2-a31b-cd48537460bc",
	"3df9b392-b847-4ac7-a737-4d3c797529e3",
	"67fb6210-2439-451d-b41c-cfe44143f988");
INSERT INTO GD_GE
	VALUES ("a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"27c5727a-c25b-4997-81b3-7c0a76292cda",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c2762572-53f0-461f-a954-d9a53870eedf",
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c2762572-53f0-461f-a954-d9a53870eedf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c2762572-53f0-461f-a954-d9a53870eedf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c2762572-53f0-461f-a954-d9a53870eedf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b81759b2-13d9-48d5-9a8c-fd64b65e1da4",
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"b81759b2-13d9-48d5-9a8c-fd64b65e1da4");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"b81759b2-13d9-48d5-9a8c-fd64b65e1da4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b81759b2-13d9-48d5-9a8c-fd64b65e1da4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f4894c8e-b74b-42c7-baa6-d50e17e4f038",
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f4894c8e-b74b-42c7-baa6-d50e17e4f038");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f4894c8e-b74b-42c7-baa6-d50e17e4f038",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f4894c8e-b74b-42c7-baa6-d50e17e4f038",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f389b9f7-d667-4141-a0d7-86535e1d0c95",
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	"00000000-0000-0000-0000-000000000000",
	"98123262-b3af-4769-b6cf-a2b30cf6e1fd",
	"a0c80721-4e77-4e57-8b02-52161a4d5122");
INSERT INTO DIM_WAY
	VALUES ("98123262-b3af-4769-b6cf-a2b30cf6e1fd",
	2608.000000,
	2016.000000,
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a0c80721-4e77-4e57-8b02-52161a4d5122",
	2608.000000,
	1968.000000,
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	"00000000-0000-0000-0000-000000000000",
	"98123262-b3af-4769-b6cf-a2b30cf6e1fd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a63b7092-ee73-4e72-a6e3-9b226ec3a71e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("37117f88-3be4-4df0-9b4b-674501e68f04",
	"ae7b42a9-4ada-49a2-9ce4-461a3775bbb8",
	"a63b7092-ee73-4e72-a6e3-9b226ec3a71e");
INSERT INTO GD_GE
	VALUES ("a806eef3-5c51-4049-9b87-4666c610abae",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"80944dc3-8160-408e-bbf7-ab7f9ccd8b32",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("a806eef3-5c51-4049-9b87-4666c610abae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d547ae71-a5c3-4cc1-afa4-ed3b33f713a0",
	"a806eef3-5c51-4049-9b87-4666c610abae",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d547ae71-a5c3-4cc1-afa4-ed3b33f713a0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d547ae71-a5c3-4cc1-afa4-ed3b33f713a0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d547ae71-a5c3-4cc1-afa4-ed3b33f713a0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("93e98c7d-0178-437b-a5e5-e0292f8c6003",
	"a806eef3-5c51-4049-9b87-4666c610abae",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"93e98c7d-0178-437b-a5e5-e0292f8c6003");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"93e98c7d-0178-437b-a5e5-e0292f8c6003",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("93e98c7d-0178-437b-a5e5-e0292f8c6003",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6cfb66a0-ea5d-49d9-a2db-9770b194e311",
	"a806eef3-5c51-4049-9b87-4666c610abae",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6cfb66a0-ea5d-49d9-a2db-9770b194e311");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6cfb66a0-ea5d-49d9-a2db-9770b194e311",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6cfb66a0-ea5d-49d9-a2db-9770b194e311",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("63081b5e-63f1-4d07-9d4d-e89703443f5f",
	"a806eef3-5c51-4049-9b87-4666c610abae",
	"00000000-0000-0000-0000-000000000000",
	"0540cafd-ed7e-4f51-9f61-cd3bee073efb",
	"769aedbf-fc8e-4b09-a2a0-3e1bbddb56f6");
INSERT INTO DIM_WAY
	VALUES ("0540cafd-ed7e-4f51-9f61-cd3bee073efb",
	2608.000000,
	1872.000000,
	"a806eef3-5c51-4049-9b87-4666c610abae",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("769aedbf-fc8e-4b09-a2a0-3e1bbddb56f6",
	2608.000000,
	1808.000000,
	"a806eef3-5c51-4049-9b87-4666c610abae",
	"00000000-0000-0000-0000-000000000000",
	"0540cafd-ed7e-4f51-9f61-cd3bee073efb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a806eef3-5c51-4049-9b87-4666c610abae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a806eef3-5c51-4049-9b87-4666c610abae",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("40b2be85-bb21-4fac-a048-45ea39f5c408",
	"c4043b6d-fa9b-4ddb-aafc-929469fe2466",
	"a806eef3-5c51-4049-9b87-4666c610abae");
INSERT INTO GD_GE
	VALUES ("6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"d72c8fcc-dccb-4da5-a9c5-0250c45e36d8",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("45b20ecb-7fba-4768-9ae5-26a29b55a916",
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"45b20ecb-7fba-4768-9ae5-26a29b55a916");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"45b20ecb-7fba-4768-9ae5-26a29b55a916",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("45b20ecb-7fba-4768-9ae5-26a29b55a916",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("35eef41a-a0b9-496f-a3e9-85603dcbf37f",
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"35eef41a-a0b9-496f-a3e9-85603dcbf37f");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"35eef41a-a0b9-496f-a3e9-85603dcbf37f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35eef41a-a0b9-496f-a3e9-85603dcbf37f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b532de24-e1b6-4784-a84b-b4bfbdbde138",
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b532de24-e1b6-4784-a84b-b4bfbdbde138");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b532de24-e1b6-4784-a84b-b4bfbdbde138",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b532de24-e1b6-4784-a84b-b4bfbdbde138",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("02b208cd-7fc8-4db9-9ac7-99bb17711e76",
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	"00000000-0000-0000-0000-000000000000",
	"d8c1420c-b14e-4078-903b-857a7382d01b",
	"e0e206dc-f410-41b0-a734-b01a539ac28d");
INSERT INTO DIM_WAY
	VALUES ("d8c1420c-b14e-4078-903b-857a7382d01b",
	2592.000000,
	1712.000000,
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e0e206dc-f410-41b0-a734-b01a539ac28d",
	2592.000000,
	1632.000000,
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	"00000000-0000-0000-0000-000000000000",
	"d8c1420c-b14e-4078-903b-857a7382d01b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6bfffdd5-f927-42dd-9bec-a9194fd08ed6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1122dbae-ddf6-4d55-8b91-09a07cd4963f",
	"10b36c36-acbb-4c58-bfb5-51ed3456c1ca",
	"6bfffdd5-f927-42dd-9bec-a9194fd08ed6");
INSERT INTO GD_GE
	VALUES ("0f44303b-4427-420e-8763-dab81a4d61f6",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"1889d649-4d73-497b-8780-c246427bc11f",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("0f44303b-4427-420e-8763-dab81a4d61f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("de2a3b8b-cde8-4402-9595-93e39ce5473f",
	"0f44303b-4427-420e-8763-dab81a4d61f6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"de2a3b8b-cde8-4402-9595-93e39ce5473f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"de2a3b8b-cde8-4402-9595-93e39ce5473f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("de2a3b8b-cde8-4402-9595-93e39ce5473f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9262f9eb-15f5-4964-b8a4-1181f1f9f8e3",
	"0f44303b-4427-420e-8763-dab81a4d61f6",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"9262f9eb-15f5-4964-b8a4-1181f1f9f8e3");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"9262f9eb-15f5-4964-b8a4-1181f1f9f8e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9262f9eb-15f5-4964-b8a4-1181f1f9f8e3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0336e3fa-fcb4-461b-b719-564ec85ba0f7",
	"0f44303b-4427-420e-8763-dab81a4d61f6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0336e3fa-fcb4-461b-b719-564ec85ba0f7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0336e3fa-fcb4-461b-b719-564ec85ba0f7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0336e3fa-fcb4-461b-b719-564ec85ba0f7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b35e0d88-ec94-4ce2-9f09-997309214cd4",
	"0f44303b-4427-420e-8763-dab81a4d61f6",
	"00000000-0000-0000-0000-000000000000",
	"7ad601c4-a0e2-4776-82a9-2399868f8529",
	"e5d19403-51d3-4cfb-8a2a-03b35fed979e");
INSERT INTO DIM_WAY
	VALUES ("7ad601c4-a0e2-4776-82a9-2399868f8529",
	928.000000,
	1776.000000,
	"0f44303b-4427-420e-8763-dab81a4d61f6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e5d19403-51d3-4cfb-8a2a-03b35fed979e",
	928.000000,
	1840.000000,
	"0f44303b-4427-420e-8763-dab81a4d61f6",
	"00000000-0000-0000-0000-000000000000",
	"7ad601c4-a0e2-4776-82a9-2399868f8529");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0f44303b-4427-420e-8763-dab81a4d61f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0f44303b-4427-420e-8763-dab81a4d61f6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("604d1b6b-a7aa-4c09-bd0f-850a37d408b5",
	"b5fc3744-3ca6-4586-8556-862592c1242f",
	"0f44303b-4427-420e-8763-dab81a4d61f6");
INSERT INTO GD_GE
	VALUES ("b41d897e-a700-40ee-9252-a1d917ddc7f9",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"812af116-02b7-4605-b7b7-faab11255c7b",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("b41d897e-a700-40ee-9252-a1d917ddc7f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e7a3875f-5f92-4b14-ab07-e043202993fa",
	"b41d897e-a700-40ee-9252-a1d917ddc7f9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e7a3875f-5f92-4b14-ab07-e043202993fa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e7a3875f-5f92-4b14-ab07-e043202993fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e7a3875f-5f92-4b14-ab07-e043202993fa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f090e749-7c69-4c53-b371-92e11d69d3f0",
	"b41d897e-a700-40ee-9252-a1d917ddc7f9",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"f090e749-7c69-4c53-b371-92e11d69d3f0");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"f090e749-7c69-4c53-b371-92e11d69d3f0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f090e749-7c69-4c53-b371-92e11d69d3f0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e62d3615-4932-4754-9d61-7bb70f9ab33e",
	"b41d897e-a700-40ee-9252-a1d917ddc7f9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e62d3615-4932-4754-9d61-7bb70f9ab33e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e62d3615-4932-4754-9d61-7bb70f9ab33e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e62d3615-4932-4754-9d61-7bb70f9ab33e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("176f2bf0-cba0-451c-a25a-2ccaa942d90c",
	"b41d897e-a700-40ee-9252-a1d917ddc7f9",
	"00000000-0000-0000-0000-000000000000",
	"c717d2e5-a723-4926-9af6-66f71fbcc8df",
	"23913647-cb97-4e5b-9e1b-be52d0506c76");
INSERT INTO DIM_WAY
	VALUES ("c717d2e5-a723-4926-9af6-66f71fbcc8df",
	928.000000,
	1936.000000,
	"b41d897e-a700-40ee-9252-a1d917ddc7f9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("23913647-cb97-4e5b-9e1b-be52d0506c76",
	928.000000,
	2016.000000,
	"b41d897e-a700-40ee-9252-a1d917ddc7f9",
	"00000000-0000-0000-0000-000000000000",
	"c717d2e5-a723-4926-9af6-66f71fbcc8df");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b41d897e-a700-40ee-9252-a1d917ddc7f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b41d897e-a700-40ee-9252-a1d917ddc7f9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("68411d8f-aa39-40d7-8d56-e4d99d87f360",
	"4766c3c8-07d0-4721-917b-ca5cf721ed72",
	"b41d897e-a700-40ee-9252-a1d917ddc7f9");
INSERT INTO GD_GE
	VALUES ("259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"a1389dc4-888d-484b-9dbf-d78fa5a0deb0",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("655bcf4c-b570-46ec-bb54-215511c10332",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"655bcf4c-b570-46ec-bb54-215511c10332");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"655bcf4c-b570-46ec-bb54-215511c10332",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("655bcf4c-b570-46ec-bb54-215511c10332",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("125ed33c-c6fe-42d5-ba97-a5b276c878ec",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"125ed33c-c6fe-42d5-ba97-a5b276c878ec");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"125ed33c-c6fe-42d5-ba97-a5b276c878ec",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("125ed33c-c6fe-42d5-ba97-a5b276c878ec",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d439aba8-05f9-436f-bf4e-ce6c6cd7f1a6",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d439aba8-05f9-436f-bf4e-ce6c6cd7f1a6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d439aba8-05f9-436f-bf4e-ce6c6cd7f1a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d439aba8-05f9-436f-bf4e-ce6c6cd7f1a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("39a7b963-13f0-4765-b60a-1815145391ca",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000",
	"5c263e41-0592-4758-88ff-8c6dc083cc7b",
	"6aec11b3-9e7f-4449-931f-36d1c9c3c572");
INSERT INTO GD_LS
	VALUES ("726380f2-273a-4a26-a8f1-48d043190693",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"39a7b963-13f0-4765-b60a-1815145391ca",
	"6aec11b3-9e7f-4449-931f-36d1c9c3c572",
	"1bab8bff-63ac-42f5-a190-ea708a31f078");
INSERT INTO GD_LS
	VALUES ("916c24a0-aa39-4f70-8f4c-086162fec92e",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"726380f2-273a-4a26-a8f1-48d043190693",
	"1bab8bff-63ac-42f5-a190-ea708a31f078",
	"1bbb3d5f-6c25-4229-83bf-030c3a77ec05");
INSERT INTO GD_LS
	VALUES ("0b561aab-524a-48bd-8eb1-92f14eef3aba",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"916c24a0-aa39-4f70-8f4c-086162fec92e",
	"1bbb3d5f-6c25-4229-83bf-030c3a77ec05",
	"44f3c693-15e9-4d95-8b41-fca1c1e0f9f0");
INSERT INTO DIM_WAY
	VALUES ("5c263e41-0592-4758-88ff-8c6dc083cc7b",
	752.000000,
	1408.000000,
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6aec11b3-9e7f-4449-931f-36d1c9c3c572",
	624.000000,
	1408.000000,
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000",
	"5c263e41-0592-4758-88ff-8c6dc083cc7b");
INSERT INTO DIM_WAY
	VALUES ("1bab8bff-63ac-42f5-a190-ea708a31f078",
	624.000000,
	1328.000000,
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000",
	"6aec11b3-9e7f-4449-931f-36d1c9c3c572");
INSERT INTO DIM_WAY
	VALUES ("1bbb3d5f-6c25-4229-83bf-030c3a77ec05",
	784.000000,
	1328.000000,
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000",
	"1bab8bff-63ac-42f5-a190-ea708a31f078");
INSERT INTO DIM_WAY
	VALUES ("44f3c693-15e9-4d95-8b41-fca1c1e0f9f0",
	784.000000,
	1360.000000,
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000",
	"1bbb3d5f-6c25-4229-83bf-030c3a77ec05");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("259df9ee-d66c-45c7-b6a5-032e5b62ebc6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("daab9cf6-e33c-4aef-94ab-87d7030e9a12",
	"ad151a93-1cc5-457a-836a-3a9c40b5c8e9",
	"259df9ee-d66c-45c7-b6a5-032e5b62ebc6");
INSERT INTO GD_GE
	VALUES ("e85012dc-01bf-40ad-be7d-33df65183229",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"1fc6fbb0-8cc4-4276-a3d8-ef7ce1e24c18",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("e85012dc-01bf-40ad-be7d-33df65183229",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6807f4a9-cb5a-4865-a8f2-4baa509c3499",
	"e85012dc-01bf-40ad-be7d-33df65183229",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6807f4a9-cb5a-4865-a8f2-4baa509c3499");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6807f4a9-cb5a-4865-a8f2-4baa509c3499",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6807f4a9-cb5a-4865-a8f2-4baa509c3499",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8299bb7a-59e1-4ec8-a275-c7d065ec8941",
	"e85012dc-01bf-40ad-be7d-33df65183229",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"8299bb7a-59e1-4ec8-a275-c7d065ec8941");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"8299bb7a-59e1-4ec8-a275-c7d065ec8941",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8299bb7a-59e1-4ec8-a275-c7d065ec8941",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c670625a-5334-4160-a940-f611cbc9d387",
	"e85012dc-01bf-40ad-be7d-33df65183229",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c670625a-5334-4160-a940-f611cbc9d387");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c670625a-5334-4160-a940-f611cbc9d387",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c670625a-5334-4160-a940-f611cbc9d387",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("5f4ada6e-e788-470d-b1e6-ce042966b915",
	"e85012dc-01bf-40ad-be7d-33df65183229",
	"00000000-0000-0000-0000-000000000000",
	"dc7c3c97-4751-40dd-8469-acf5ea24850a",
	"432f176d-4007-40e3-ada9-29dc37db0dcf");
INSERT INTO DIM_WAY
	VALUES ("dc7c3c97-4751-40dd-8469-acf5ea24850a",
	928.000000,
	1616.000000,
	"e85012dc-01bf-40ad-be7d-33df65183229",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("432f176d-4007-40e3-ada9-29dc37db0dcf",
	928.000000,
	1680.000000,
	"e85012dc-01bf-40ad-be7d-33df65183229",
	"00000000-0000-0000-0000-000000000000",
	"dc7c3c97-4751-40dd-8469-acf5ea24850a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e85012dc-01bf-40ad-be7d-33df65183229",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e85012dc-01bf-40ad-be7d-33df65183229",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("955fc9a2-fe4a-457d-b1a8-ef87f0766cd6",
	"a4079e78-ff80-455a-a3ff-25874529e648",
	"e85012dc-01bf-40ad-be7d-33df65183229");
INSERT INTO GD_GE
	VALUES ("ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"8aab05aa-f741-45a3-a62f-508e8666849f",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d7e445e0-18ba-4ea3-9def-e257f812ebca",
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d7e445e0-18ba-4ea3-9def-e257f812ebca");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d7e445e0-18ba-4ea3-9def-e257f812ebca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7e445e0-18ba-4ea3-9def-e257f812ebca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5d034b83-ceeb-4e37-9700-2c758ab99308",
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"5d034b83-ceeb-4e37-9700-2c758ab99308");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"5d034b83-ceeb-4e37-9700-2c758ab99308",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5d034b83-ceeb-4e37-9700-2c758ab99308",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("57e4d7b8-51d3-42e7-acee-002eff56734d",
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"57e4d7b8-51d3-42e7-acee-002eff56734d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"57e4d7b8-51d3-42e7-acee-002eff56734d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("57e4d7b8-51d3-42e7-acee-002eff56734d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4d375f70-4db6-40a1-b7d9-9b339ed86b25",
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	"00000000-0000-0000-0000-000000000000",
	"196497ef-09bb-489e-b697-feb2a5c597b2",
	"51f3a297-f86e-4759-94be-76c516074b2b");
INSERT INTO DIM_WAY
	VALUES ("196497ef-09bb-489e-b697-feb2a5c597b2",
	928.000000,
	1456.000000,
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("51f3a297-f86e-4759-94be-76c516074b2b",
	928.000000,
	1536.000000,
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	"00000000-0000-0000-0000-000000000000",
	"196497ef-09bb-489e-b697-feb2a5c597b2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ed703ec0-3f23-42c8-83a4-40c429e58f6d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("be29c954-029e-49aa-995c-7e1abe20957e",
	"890011d9-b031-4a4d-87a4-a4c292d8b2c1",
	"ed703ec0-3f23-42c8-83a4-40c429e58f6d");
INSERT INTO GD_GE
	VALUES ("a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"6a372671-3e29-49b9-8d4b-2f0311a985fd",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("836eebdb-0b75-4c3a-bab0-026761955362",
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"836eebdb-0b75-4c3a-bab0-026761955362");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"836eebdb-0b75-4c3a-bab0-026761955362",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("836eebdb-0b75-4c3a-bab0-026761955362",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1e384727-fee1-4841-86a7-e1f8538aac4a",
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"1e384727-fee1-4841-86a7-e1f8538aac4a");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"1e384727-fee1-4841-86a7-e1f8538aac4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1e384727-fee1-4841-86a7-e1f8538aac4a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("639ff8c3-3726-43c0-8d60-fb67ce5b8a38",
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"639ff8c3-3726-43c0-8d60-fb67ce5b8a38");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"639ff8c3-3726-43c0-8d60-fb67ce5b8a38",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("639ff8c3-3726-43c0-8d60-fb67ce5b8a38",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("653c9bea-25c4-4357-9ede-7d6c3f5565dc",
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"00000000-0000-0000-0000-000000000000",
	"de60997b-c6a4-4d72-9dc7-cd23f2be2bf6",
	"73509f4f-1d7c-433e-bba4-5e1ce86a9105");
INSERT INTO GD_LS
	VALUES ("ea9251c8-d8fc-448b-9c66-7f84035b3bf8",
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"653c9bea-25c4-4357-9ede-7d6c3f5565dc",
	"73509f4f-1d7c-433e-bba4-5e1ce86a9105",
	"99019ee4-92f1-4715-9769-3e557b416368");
INSERT INTO GD_LS
	VALUES ("b492597d-8ed6-475a-b4b0-783443591b45",
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"ea9251c8-d8fc-448b-9c66-7f84035b3bf8",
	"99019ee4-92f1-4715-9769-3e557b416368",
	"cfda4441-4cb7-4a48-9873-6064a706d092");
INSERT INTO DIM_WAY
	VALUES ("de60997b-c6a4-4d72-9dc7-cd23f2be2bf6",
	1072.000000,
	2080.000000,
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("73509f4f-1d7c-433e-bba4-5e1ce86a9105",
	1168.000000,
	2080.000000,
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"00000000-0000-0000-0000-000000000000",
	"de60997b-c6a4-4d72-9dc7-cd23f2be2bf6");
INSERT INTO DIM_WAY
	VALUES ("99019ee4-92f1-4715-9769-3e557b416368",
	1168.000000,
	1376.000000,
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"00000000-0000-0000-0000-000000000000",
	"73509f4f-1d7c-433e-bba4-5e1ce86a9105");
INSERT INTO DIM_WAY
	VALUES ("cfda4441-4cb7-4a48-9873-6064a706d092",
	1280.000000,
	1376.000000,
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"00000000-0000-0000-0000-000000000000",
	"99019ee4-92f1-4715-9769-3e557b416368");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a1759d4d-81a5-4610-8e0c-bb1866ded518",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a1759d4d-81a5-4610-8e0c-bb1866ded518",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("088668a6-6550-4d24-98b4-b5d0b70c0817",
	"b9ffade8-168a-431e-81bf-3270b5b45ff7",
	"a1759d4d-81a5-4610-8e0c-bb1866ded518");
INSERT INTO GD_GE
	VALUES ("0dddb922-b099-4ab0-9f55-09c041b6c309",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"ba01ed58-ac4a-4169-9b78-2ec0a51ce3b3",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("0dddb922-b099-4ab0-9f55-09c041b6c309",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("98d8a6ba-cf8c-4ca2-be1c-3485a9a129f5",
	"0dddb922-b099-4ab0-9f55-09c041b6c309",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"98d8a6ba-cf8c-4ca2-be1c-3485a9a129f5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"98d8a6ba-cf8c-4ca2-be1c-3485a9a129f5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("98d8a6ba-cf8c-4ca2-be1c-3485a9a129f5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ba90bbd8-9571-4688-bca2-e288800863dc",
	"0dddb922-b099-4ab0-9f55-09c041b6c309",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"ba90bbd8-9571-4688-bca2-e288800863dc");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"ba90bbd8-9571-4688-bca2-e288800863dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba90bbd8-9571-4688-bca2-e288800863dc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("35584928-255b-4260-b6ee-d2ec21df87cb",
	"0dddb922-b099-4ab0-9f55-09c041b6c309",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"35584928-255b-4260-b6ee-d2ec21df87cb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"35584928-255b-4260-b6ee-d2ec21df87cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35584928-255b-4260-b6ee-d2ec21df87cb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("348e7ff0-ce90-48a8-bd69-0ad64bf3b43d",
	"0dddb922-b099-4ab0-9f55-09c041b6c309",
	"00000000-0000-0000-0000-000000000000",
	"3a593bd0-71ac-4cf4-8fe6-55648eaf159a",
	"fcee76bb-e574-47f2-8714-bafdcd60641e");
INSERT INTO DIM_WAY
	VALUES ("3a593bd0-71ac-4cf4-8fe6-55648eaf159a",
	1424.000000,
	1456.000000,
	"0dddb922-b099-4ab0-9f55-09c041b6c309",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fcee76bb-e574-47f2-8714-bafdcd60641e",
	1424.000000,
	1520.000000,
	"0dddb922-b099-4ab0-9f55-09c041b6c309",
	"00000000-0000-0000-0000-000000000000",
	"3a593bd0-71ac-4cf4-8fe6-55648eaf159a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0dddb922-b099-4ab0-9f55-09c041b6c309",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0dddb922-b099-4ab0-9f55-09c041b6c309",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ffb8b856-e2ec-49e0-85fd-e1eeae450d1a",
	"e0677821-3f47-4025-87f3-0b96fc13381c",
	"0dddb922-b099-4ab0-9f55-09c041b6c309");
INSERT INTO GD_GE
	VALUES ("724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"4806250c-9ffc-46c8-8f56-7e567980c01c",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("18833706-d6fa-4648-aac4-66966717d92c",
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"18833706-d6fa-4648-aac4-66966717d92c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"18833706-d6fa-4648-aac4-66966717d92c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18833706-d6fa-4648-aac4-66966717d92c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ab920f4d-6e92-4bbe-903d-e52684e1ad63",
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"ab920f4d-6e92-4bbe-903d-e52684e1ad63");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"ab920f4d-6e92-4bbe-903d-e52684e1ad63",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ab920f4d-6e92-4bbe-903d-e52684e1ad63",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1e63f1a4-2227-4911-ace4-b085e317925b",
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1e63f1a4-2227-4911-ace4-b085e317925b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1e63f1a4-2227-4911-ace4-b085e317925b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1e63f1a4-2227-4911-ace4-b085e317925b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("5ff723e5-86d7-4d42-8630-70f1d69bdd55",
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	"00000000-0000-0000-0000-000000000000",
	"3c8123a3-90c1-498c-8229-0b204691d784",
	"9c4d2d59-3459-471b-9fd0-9feef439cae4");
INSERT INTO DIM_WAY
	VALUES ("3c8123a3-90c1-498c-8229-0b204691d784",
	1456.000000,
	1616.000000,
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9c4d2d59-3459-471b-9fd0-9feef439cae4",
	1456.000000,
	1680.000000,
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	"00000000-0000-0000-0000-000000000000",
	"3c8123a3-90c1-498c-8229-0b204691d784");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("724dc6fa-e14f-48e5-8a9d-cdb51b62b38b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ba8aed5d-a8a1-4eca-8623-7f3c71b4b3be",
	"06e8ebae-7bba-4011-ae46-1ce9c77d1248",
	"724dc6fa-e14f-48e5-8a9d-cdb51b62b38b");
INSERT INTO GD_GE
	VALUES ("62b77df9-dcdc-4e89-866a-2436039ba74b",
	"aa8c958f-75b2-4c12-a610-77ed291cf4da",
	"7cd2b532-5f8f-4564-bdbf-b72e00fe0155",
	42,
	0,
	'ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("62b77df9-dcdc-4e89-866a-2436039ba74b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3b125246-dc5f-4493-b52d-cd94106ead04",
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3b125246-dc5f-4493-b52d-cd94106ead04");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3b125246-dc5f-4493-b52d-cd94106ead04",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3b125246-dc5f-4493-b52d-cd94106ead04",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c3dc0f20-bc1d-4d98-939f-350910076da5",
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"c3dc0f20-bc1d-4d98-939f-350910076da5");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"c3dc0f20-bc1d-4d98-939f-350910076da5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c3dc0f20-bc1d-4d98-939f-350910076da5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("352b2be4-c584-4f43-b522-0970afeaab47",
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"352b2be4-c584-4f43-b522-0970afeaab47");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"352b2be4-c584-4f43-b522-0970afeaab47",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("352b2be4-c584-4f43-b522-0970afeaab47",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2b7eafb7-9014-48aa-948f-939c76e101ee",
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"00000000-0000-0000-0000-000000000000",
	"ab70692c-384e-44b8-94ce-336a639d6e91",
	"2f9d24d4-ed21-4033-a548-930c85f22f72");
INSERT INTO GD_LS
	VALUES ("f6286b54-1a7a-47bd-91d1-5d869a0f834f",
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"2b7eafb7-9014-48aa-948f-939c76e101ee",
	"2f9d24d4-ed21-4033-a548-930c85f22f72",
	"b9420fab-41ee-4ddb-a229-05a5da8c2b0f");
INSERT INTO GD_LS
	VALUES ("39a95944-6caf-476f-a3cd-77479cca437a",
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"f6286b54-1a7a-47bd-91d1-5d869a0f834f",
	"b9420fab-41ee-4ddb-a229-05a5da8c2b0f",
	"0bceab56-eeea-405c-a909-793049bf1d5c");
INSERT INTO DIM_WAY
	VALUES ("ab70692c-384e-44b8-94ce-336a639d6e91",
	1600.000000,
	1728.000000,
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2f9d24d4-ed21-4033-a548-930c85f22f72",
	1648.000000,
	1728.000000,
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"00000000-0000-0000-0000-000000000000",
	"ab70692c-384e-44b8-94ce-336a639d6e91");
INSERT INTO DIM_WAY
	VALUES ("b9420fab-41ee-4ddb-a229-05a5da8c2b0f",
	1648.000000,
	1568.000000,
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"00000000-0000-0000-0000-000000000000",
	"2f9d24d4-ed21-4033-a548-930c85f22f72");
INSERT INTO DIM_WAY
	VALUES ("0bceab56-eeea-405c-a909-793049bf1d5c",
	1712.000000,
	1568.000000,
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"00000000-0000-0000-0000-000000000000",
	"b9420fab-41ee-4ddb-a229-05a5da8c2b0f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"62b77df9-dcdc-4e89-866a-2436039ba74b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("62b77df9-dcdc-4e89-866a-2436039ba74b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b52c01a3-f2c5-4ad7-8571-fddd26dbb91c",
	"86ab9732-a117-4d9b-a830-460c28c2305b",
	"62b77df9-dcdc-4e89-866a-2436039ba74b");
INSERT INTO DIM_DIA
	VALUES ("aa8c958f-75b2-4c12-a610-77ed291cf4da",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ_PROXY
	VALUES ("1a3b9224-8068-4b0c-9d33-3dfc80fb9e89",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000",
	'../Expression Test.xtuml');
